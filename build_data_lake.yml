AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # S3 Bucket to store data
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: my-s3-bucket-raw

  # Kinesis Data Stream
  MyKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: my-kinesis-stream
      ShardCount: 1  # Number of shards in the stream

  # IAM Role for Lambda to read from Kinesis and write to Firehose
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      # Attach policy directly to the Role
      Policies:
        - PolicyName: 'KinesisToFirehosePolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetRecords'
                  - 'kinesis:GetShardIterator'
                Resource: !GetAtt MyKinesisStream.Arn

  # Lambda Function to process Kinesis data and send to Firehose
  MyKinesisLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ProcessKinesisDataAndSendToFirehose'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.8'  # Use the runtime that matches your Lambda code
      Code:
        S3Bucket: 'st-my-code-bucket'  # Replace with your actual bucket
        S3Key: 'rename-s3-files.zip'  # Replace with your actual Lambda code key
      Timeout: 60  # Set a suitable timeout

  # Event Source Mapping to trigger Lambda when data arrives in Kinesis Stream
  KinesisLambdaEventSource:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100  # Adjust batch size as needed
      EventSourceArn: !GetAtt MyKinesisStream.Arn
      FunctionName: !GetAtt MyKinesisLambda.Arn
      StartingPosition: 'TRIM_HORIZON'  # Start processing from the earliest record

  # IAM Role for Kinesis Firehose to access S3
  FirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'fireho
