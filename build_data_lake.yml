AWSTemplateFormatVersion: '2010-09-09'

Resources:
  # S3 Bucket to store data
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: my-s3-bucket-raw

  # Kinesis Data Stream
  MyKinesisStream:
    Type: 'AWS::Kinesis::Stream'
    Properties:
      Name: my-kinesis-stream
      ShardCount: 1  # Number of shards in the stream

  # IAM Role for Lambda to read from Kinesis and write to Firehose
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
    Policies:
      - PolicyName: 'KinesisToFirehosePolicy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: 'Allow'
              Action:
                - 'kinesis:DescribeStream'
                - 'kinesis:GetRecords'
                - 'kinesis:GetShardIterator'
              Resource: !GetAtt MyKinesisStream.Arn
      

  # Lambda Function to process Kinesis data and send to Firehose
  MyKinesisLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      FunctionName: 'ProcessKinesisDataAndSendToFirehose'
      Handler: 'index.lambda_handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: 'python3.8'  # Use the runtime that matches your Lambda code
      Code:
        S3Bucket: 'st-my-code-bucket'  # Replace with your actual bucket
        S3Key: 'rename-s3-files.zip'  # Replace with your actual Lambda code key
      Timeout: 60  # Set a suitable timeout

  # Event Source Mapping to trigger Lambda when data arrives in Kinesis Stream
  KinesisLambdaEventSource:
    Type: 'AWS::Lambda::EventSourceMapping'
    Properties:
      BatchSize: 100  # Adjust batch size as needed
      EventSourceArn: !GetAtt MyKinesisStream.Arn
      FunctionName: !GetAtt MyKinesisLambda.Arn
      StartingPosition: 'TRIM_HORIZON'  # Start processing from the earliest record

  # IAM Role for Kinesis Firehose to access S3
  FirehoseRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'firehose.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'FirehoseToS3Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 's3:PutObject'
                Resource: 'arn:aws:s3:::my-s3-bucket-raw/*'
              - Effect: 'Allow'
                Action:
                  - 'kinesis:DescribeStream'
                  - 'kinesis:GetRecords'
                  - 'kinesis:GetShardIterator'
                Resource: !GetAtt MyKinesisStream.Arn

  # Kinesis Firehose Delivery Stream to upload data to S3
  MyFirehoseDeliveryStream:
    Type: 'AWS::KinesisFirehose::DeliveryStream'
    Properties:
      DeliveryStreamName: 'my-kinesis-Firehose'
      DeliveryStreamType: 'KinesisStreamAsSource'
      KinesisStreamSourceConfiguration:
        KinesisStreamARN: !GetAtt MyKinesisStream.Arn
        RoleARN: !GetAtt FirehoseRole.Arn
      ProcessingConfiguration:
        Enabled: true
        ProcessingLambdaFunction:
          RoleARN: !GetAtt FirehoseRole.Arn
          LambdaFunctionARN: !GetAtt MyKinesisLambda.Arn
      S3DestinationConfiguration:
        RoleARN: !GetAtt FirehoseRole.Arn
        BucketARN: !GetAtt MyS3Bucket.Arn
        Prefix: 'firehose-data/'
        CompressionFormat: 'UNCOMPRESSED'  # You can change this to GZIP or Snappy
        BufferingHints:
          IntervalInSeconds: 300  # Buffer time before writing data
          SizeInMBs: 5  # Buffer size before writing data
  
KinesisToFirehoseRole:
  Type: 'AWS::IAM::Role'
  Properties:
    AssumeRolePolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Principal:
            Service: 'firehose.amazonaws.com'
          Action: 'sts:AssumeRole'
    InlinePolicies:
      KinesisToFirehosePolicy:
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            # Kinesis-specific actions
            - Effect: 'Allow'
              Action:
                - 'kinesis:DescribeStream'
                - 'kinesis:GetRecords'
                - 'kinesis:GetShardIterator'
              Resource: !GetAtt MyKinesisStream.Arn

            # Firehose-specific actions
            - Effect: 'Allow'
              Action:
                - 'firehose:PutRecord'
                - 'firehose:PutRecordBatch'
              Resource: !GetAtt MyFirehoseDeliveryStream.Arn



Outputs:
  S3BucketName:
    Description: 'S3 Bucket Name'
    Value: !Ref MyS3Bucket

  KinesisStreamName:
    Description: 'Kinesis Data Stream Name'
    Value: !Ref MyKinesisStream

  FirehoseDeliveryStreamName:
    Description: 'Kinesis Firehose Delivery Stream Name'
    Value: !Ref MyFirehoseDeliveryStream
