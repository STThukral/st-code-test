import json
import boto3
import time

athena_client = boto3.client('athena')
s3_client = boto3.client('s3')

def handler(event, context):
    database_name = "st_my_database"
    table_name = "st_my_table"
    bucket_name = "st-athena-bucket"
    s3_data_location = f"s3://{bucket_name}/path/to/data/"

    # Create the database
    create_database_query = f"""
    CREATE DATABASE IF NOT EXISTS {database_name};
    """

    # Create the external table
    create_table_query = f"""
    CREATE EXTERNAL TABLE IF NOT EXISTS {database_name}.{table_name} (
      id INT,
      name STRING,
      age INT,
      date TIMESTAMP
    )
    ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
    WITH SERDEPROPERTIES ('separatorChar' = ',')
    LOCATION '{s3_data_location}';
    """

    # Function to run Athena query
    def run_athena_query(query):
        response = athena_client.start_query_execution(
            QueryString=query,
            QueryExecutionContext={ 
                'Database': database_name
            },
            ResultConfiguration={
                'OutputLocation': f's3://{bucket_name}/athena/results/'
            }
        )
        query_execution_id = response['QueryExecutionId']
        return query_execution_id

    # Run CREATE DATABASE query
    try:
        query_execution_id = run_athena_query(create_database_query)
        # Wait for the query to complete
        while True:
            result = athena_client.get_query_execution(QueryExecutionId=query_execution_id)
            state = result['QueryExecution']['Status']['State']
            if state == 'SUCCEEDED':
                # Once database is created, run the CREATE TABLE query
                query_execution_id = run_athena_query(create_table_query)
                while True:
                    result = athena_client.get_query_execution(QueryExecutionId=query_execution_id)
                    state = result['QueryExecution']['Status']['State']
                    if state == 'SUCCEEDED':
                        return {
                            'statusCode': 200,
                            'body': json.dumps(f"Queries succeeded: {query_execution_id}")
                        }
                    elif state == 'FAILED':
                        # Fetch detailed error message from the failed query execution
                        error_message = result['QueryExecution']['Status'].get('StateChangeReason', 'Unknown error')
                        return {
                            'statusCode': 500,
                            'body': json.dumps(f"Query failed: {query_execution_id}, Error: {error_message}")
                        }
                    else:
                        time.sleep(5)
            elif state == 'FAILED':
                # Fetch detailed error message from the failed query execution
                error_message = result['QueryExecution']['Status'].get('StateChangeReason', 'Unknown error')
                return {
                    'statusCode': 500,
                    'body': json.dumps(f"Database creation failed: {query_execution_id}, Error: {error_message}")
                }
            else:
                time.sleep(5)
    except Exception as e:
        return {
            'statusCode': 500,
            'body': json.dumps(str(e))
        }






Lmabda policy :-

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "athena:StartQueryExecution",
                "athena:GetQueryExecution",
                "athena:GetQueryResults",
                "athena:ListQueryExecutions",
                "s3:PutObject",
                "s3:GetObject",
                "s3:GetBucketLocation",
                "s3:ListBucket",
                "s3:ListBucketMultipartUploads",
                "s3:ListMultipartUploadParts",
                "s3:AbortMultipartUpload",
                "s3:CreateBucket"
            ],
            "Resource": "*",
            "Effect": "Allow"
        },
        {
            "Action": [
                "logs:*"
            ],
            "Resource": "*",
            "Effect": "Allow"
        }
    ]
}


Athena access policy :-

{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Action": [
                "s3:GetObject",
                "s3:PutObject"
            ],
            "Resource": "arn:aws:s3:::st-athena-bucket/*",
            "Effect": "Allow"
        }
    ]
}


yashi@LAPTOP-3NEKT69J MINGW64 /c/sharad/CV/AWS_CV/Capgemini/AWS_CLI_work/github_work/st-code-test (dev)
$ git add Athena-cf-buildspec.yml

yashi@LAPTOP-3NEKT69J MINGW64 /c/sharad/CV/AWS_CV/Capgemini/AWS_CLI_work/github_work/st-code-test (dev)
$ git commit -m "Athena buildspecs"
[dev 715dfa7] Athena buildspecs
 1 file changed, 15 insertions(+), 7 deletions(-)

yashi@LAPTOP-3NEKT69J MINGW64 /c/sharad/CV/AWS_CV/Capgemini/AWS_CLI_work/github_work/st-code-test (dev)
$ git push origin dev
Enumerating objects: 5, done.
Counting objects: 100% (5/5), done.
Delta compression using up to 8 threads
Compressing objects: 100% (3/3), done.
Writing objects: 100% (3/3), 539 bytes | 269.00 KiB/s, done.
Total 3 (delta 1), reused 0 (delta 0), pack-reused 0 (from 0)
remote: Resolving deltas: 100% (1/1), completed with 1 local object.
To https://github.com/STThukral/st-code-test.git
   115d581..715dfa7  dev -> dev

yashi@LAPTOP-3NEKT69J MINGW64 /c/sharad/CV/AWS_CV/Capgemini/AWS_CLI_work/github_work/st-code-test (dev)

aws cloudformation create-stack --stack-name my-athena-cf-stack --template-body file://Athena-cf-buildspec.yml --capabilities CAPABILITY_NAMED_IAM

$ aws cloudformation create-stack --stack-name my-athena-cf-stack --template-body file://Athena-cf-buildspec.yml --capabilities CAPABILITY_NAMED_IAM
{
    "StackId": "arn:aws:cloudformation:eu-west-2:277707117797:stack/my-athena-cf-stack/88c895c0-fdf0-11ef-aaeb-0a093c2ce363"
}