AWSTemplateFormatVersion: '2010-09-09'
Description: Setup Athena Table from S3 data with Lambda.

Resources:

  # S3 Bucket to store your data
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'st-athena-bucket'

  MyS3BucketPolicy:
  Type: 'AWS::S3::BucketPolicy'
  Properties:
    Bucket: !Ref MyS3Bucket
    PolicyDocument:
      Version: '2012-10-17'
      Statement:
        - Effect: 'Allow'
          Action:
            - s3:GetObject
            - s3:ListBucket
            - s3:PutObject
          Resource:
            - !Sub 'arn:aws:s3:::${MyS3Bucket}/*'   # Access to all objects inside the bucket
            - !Sub 'arn:aws:s3:::${MyS3Bucket}'     # Access to the bucket itself
        - Effect: 'Allow'
          Action:
            - s3:GetObject
            - s3:ListBucket
          Resource:
            - !Sub 'arn:aws:s3:::${MyS3Bucket}/*'   # Athena access to read data from the bucket
            - !Sub 'arn:aws:s3:::${MyS3Bucket}'     # Athena access to list objects in the bucket
        - Effect: 'Allow'
          Action:
            - s3:PutObject
          Resource:
            - !Sub 'arn:aws:s3:::${MyS3Bucket}/athena/results/*'  # Athena access to write results to a specific folder


  # IAM Role to allow Athena to access the S3 bucket
  AthenaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'athena.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AthenaS3AccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}/*'

  # IAM Role to allow the Lambda function to interact with Athena and S3
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaAthenaS3Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                 - athena:StartQueryExecution,
                 - athena:GetQueryExecution,
                 - athena:GetQueryResults,
                 - athena:ListQueryExecutions,
                 - s3:PutObject,
                 - s3:GetObject,
                 - s3:GetBucketLocation,
                 - s3:ListBucket,
                 - s3:ListBucketMultipartUploads,
                 - s3:ListMultipartUploadParts,
                 - s3:AbortMultipartUpload,
                 - s3:CreateBucket
                Resource: "*"
              - Effect: 'Allow'
                Action:
                  - 'logs:*'
                Resource: "*"

  # Athena Workgroup to specify for the Athena query execution
  AthenaWorkGroup:
    Type: 'AWS::Athena::WorkGroup'
    Properties:
      Name: 'my-athena-workgroup'
      State: 'ENABLED'
      WorkGroupConfiguration:
        ResultConfiguration:
          OutputLocation: !Sub 's3://${MyS3Bucket}/athena/results/'

  # Lambda Function to create Athena database and table
  AthenaCreateTableLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: 'CreateAthenaDatabaseAndTable'
      Code:
        ZipFile: |
          import json
          import boto3
          import time

          athena_client = boto3.client('athena')
          s3_client = boto3.client('s3')

          def handler(event, context):
              database_name = "st_my_database"
              table_name = "st_my_table"
              bucket_name = "st-athena-bucket"
              s3_data_location = f"s3://{bucket_name}/path/to/data/"

              # Query to create the database
              create_database_query = f"""
              CREATE DATABASE IF NOT EXISTS {database_name};
              """

              # Query to create the external table
              create_table_query = f"""
              CREATE EXTERNAL TABLE IF NOT EXISTS {database_name}.{table_name} (
                id INT,
                name STRING,
                age INT,
                date TIMESTAMP
              )
              ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
              WITH SERDEPROPERTIES ('separatorChar' = ',')
              LOCATION '{s3_data_location}';
              """

              # Function to execute a query
              def execute_query(query):
                  response = athena_client.start_query_execution(
                      QueryString=query,
                      QueryExecutionContext={'Database': database_name},
                      ResultConfiguration={'OutputLocation': f's3://{bucket_name}/athena/results/'},
                      WorkGroup='my-athena-workgroup'  # Use the created workgroup
                  )
                  return response['QueryExecutionId']

              try:
                  # Execute CREATE DATABASE query
                  query_execution_id_1 = execute_query(create_database_query)

                  # Wait for the database creation query to complete
                  while True:
                      result_1 = athena_client.get_query_execution(QueryExecutionId=query_execution_id_1)
                      state_1 = result_1['QueryExecution']['Status']['State']
                      if state_1 == 'SUCCEEDED':
                          print(f"Database creation query succeeded: {query_execution_id_1}")
                          break
                      elif state_1 == 'FAILED':
                          # Fetch the error message from the query execution result
                          error_message = result_1['QueryExecution']['Status'].get('StateChangeReason', 'Unknown error')
                          return {
                              'statusCode': 500,
                              'body': json.dumps(f"Database creation query failed: {error_message}")
                          }
                      else:
                          time.sleep(5)

                  # Execute CREATE TABLE query
                  query_execution_id_2 = execute_query(create_table_query)

                  # Wait for the table creation query to complete
                  while True:
                      result_2 = athena_client.get_query_execution(QueryExecutionId=query_execution_id_2)
                      state_2 = result_2['QueryExecution']['Status']['State']
                      if state_2 == 'SUCCEEDED':
                          return {
                              'statusCode': 200,
                              'body': json.dumps(f"Table creation query succeeded: {query_execution_id_2}")
                          }
                      elif state_2 == 'FAILED':
                          # Fetch the error message from the query execution result
                          error_message = result_2['QueryExecution']['Status'].get('StateChangeReason', 'Unknown error')
                          return {
                              'statusCode': 500,
                              'body': json.dumps(f"Table creation query failed: {error_message}")
                          }
                      else:
                          time.sleep(5)

              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps(str(e))
                  }


      Runtime: 'python3.8'
      Timeout: 300 # 5 minutes

  # CloudWatch Event Rule to trigger Lambda on Stack Creation
  AthenaCreateTableTrigger:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Trigger Lambda after CloudFormation Stack is created'
      EventPattern:
        Source:
          - 'aws.cloudformation'
        DetailType:
          - 'AWS API Call via CloudTrail'
        Detail:
          eventSource:
            - 'cloudformation.amazonaws.com'
          eventName:
            - 'CreateStack'
      Targets:
        - Arn: !GetAtt AthenaCreateTableLambda.Arn
          Id: 'TargetFunctionV1'

Outputs:
  S3BucketName:
    Description: 'S3 Bucket name for storing data'
    Value: !Ref MyS3Bucket

  LambdaFunctionName:
    Description: 'Lambda Function name for creating Athena table'
    Value: !Ref AthenaCreateTableLambda
