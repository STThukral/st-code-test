AWSTemplateFormatVersion: '2010-09-09'
Description: Setup Athena Table from S3 data with Lambda.

Resources:

  # S3 Bucket to store your data
  MyS3Bucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      BucketName: 'st-athena-bucket'

  # IAM Role to allow Athena to access the S3 bucket
  AthenaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'athena.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'AthenaS3AccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action: 's3:GetObject'
                Resource: !Sub 'arn:aws:s3:::${MyS3Bucket}/*'

  # Lambda execution role to allow the Lambda function to interact with Athena and S3
  LambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Principal:
              Service: 'lambda.amazonaws.com'
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'LambdaAthenaS3Policy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Action:
                  - 'athena:StartQueryExecution'
                  - 'athena:GetQueryExecution'
                  - 'athena:GetQueryResults'
                  - 'athena:ListQueryExecutions'
                  - 's3:PutObject'
                  - 's3:GetObject'
                Resource: "*"

  # Lambda Function to create Athena database and table
  AthenaCreateTableLambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Handler: 'index.handler'
      Role: !GetAtt LambdaExecutionRole.Arn
      FunctionName: 'CreateAthenaDatabaseAndTable'
      Code:
        ZipFile: |
          import json
          import boto3
          import time

          athena_client = boto3.client('athena')
          s3_client = boto3.client('s3')

          def handler(event, context):
              database_name = "st_my_database"
              table_name = "st_my_table"
              bucket_name = "st-athena-bucket"
              s3_data_location = f"s3://{bucket_name}/path/to/data/"
              query = f"""
              CREATE DATABASE IF NOT EXISTS {database_name};
              CREATE EXTERNAL TABLE IF NOT EXISTS {database_name}.{table_name} (
                id INT,
                name STRING,
                age INT,
                date TIMESTAMP
              )
              ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.OpenCSVSerde'
              WITH SERDEPROPERTIES ('separatorChar' = ',')
              LOCATION '{s3_data_location}';
              """

              # Execute Athena query
              try:
                  response = athena_client.start_query_execution(
                      QueryString=query,
                      QueryExecutionContext={
                          'Database': database_name
                      },
                      ResultConfiguration={
                          'OutputLocation': f's3://{bucket_name}/athena/results/'
                      }
                  )

                  # Wait for the query to complete
                  query_execution_id = response['QueryExecutionId']
                  while True:
                      result = athena_client.get_query_execution(QueryExecutionId=query_execution_id)
                      state = result['QueryExecution']['Status']['State']
                      if state == 'SUCCEEDED':
                          return {
                              'statusCode': 200,
                              'body': json.dumps(f"Query succeeded: {query_execution_id}")
                          }
                      elif state == 'FAILED':
                          return {
                              'statusCode': 500,
                              'body': json.dumps(f"Query failed: {query_execution_id}")
                          }
                      else:
                          time.sleep(5)
              except Exception as e:
                  return {
                      'statusCode': 500,
                      'body': json.dumps(str(e))
                  }

      Runtime: 'python3.8'
      Timeout: 300 # 5 minutes

  # CloudWatch Event Rule to trigger Lambda on Stack Creation
  AthenaCreateTableTrigger:
    Type: 'AWS::Events::Rule'
    Properties:
      Description: 'Trigger Lambda after CloudFormation Stack is created'
      EventPattern:
        Source:
          - 'aws.cloudformation'
        DetailType:
          - 'AWS API Call via CloudTrail'
        Detail:
          eventSource: 'cloudformation.amazonaws.com'
          eventName: 'CreateStack'
      Targets:
        - Arn: !GetAtt AthenaCreateTableLambda.Arn
          Id: 'TargetFunctionV1'

Outputs:
  S3BucketName:
    Description: 'S3 Bucket name for storing data'
    Value: !Ref MyS3Bucket

  LambdaFunctionName:
    Description: 'Lambda Function name for creating Athena table'
    Value: !Ref AthenaCreateTableLambda
